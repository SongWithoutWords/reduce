#+INCLUDE: ../../language-features/table.org :minlevel 1

* Principal Component Analysis

  #+begin_src R :session :results output :exports none
    library("FactoMineR")
    library("factoextra")
    library("ape")


    data.transpose = read.csv(file="language-features.csv", head = TRUE, check.names = FALSE) 

    data = as.data.frame(t(data.transpose))

    statically.typed.languages = data[data$"static-typing"==1, ]

    data.to.analyze = data # statically.typed.languages

    data.active = data.to.analyze[, -(0:1)]

    params.ncp = 5


    res.pca <- PCA(
       data.active,
       ncp = params.ncp,
       graph = FALSE)

    plot.to.png = function(ptp.filename, ptp.function, ptp.width = 540, ptp.height = 540) {
      png(filename = ptp.filename, width = ptp.width, height = ptp.height)
      plot.result = ptp.function()
      print(plot.result)
      dev.off()
    }

    # plot the principal component weights
    plot.to.png("pca/principal-components.png",
      function(){fviz_eig(res.pca, addlabels = TRUE)})

    gradient = c("#0099FF", "#FF4400")

    axes.primary = c(1, 2)
    axes.secondary = c(3, 2)

    # plot the language features
    plot.to.png("pca/language-features-primary-axes.png", 
       function() {
         fviz_pca_var(
           res.pca,
           axes = axes.primary,
           geom = c("text", "point"),
           col.var = "cos2",
           gradient.cols = gradient,
           repel = TRUE)
       }
    )

    plot.to.png("pca/language-features-secondary-axes.png", 
       function() {
         fviz_pca_var(
           res.pca,
           axes = axes.secondary,
           geom = c("text", "point"),
           col.var = "cos2",
           gradient.cols = gradient,
           repel = TRUE)
       }
    )

    # plot the languages
    plot.to.png("pca/languages-primary-axes.png", 
       function() {
         fviz_pca_ind(
           res.pca,
           axes = axes.primary,
           geom = c("text", "point"),
           col.ind = "cos2",
           gradient.cols = gradient,
           repel = TRUE)
       }
    )

    plot.to.png("pca/languages-secondary-axes.png", 
       function() {
         fviz_pca_ind(
           res.pca,
           axes = axes.secondary,
           geom = c("text", "point"),
           col.ind = "cos2",
           gradient.cols = gradient,
           repel = TRUE)
       }
    )

    # plot hierarchical clustering on principal components
    res.hcpc <- HCPC(res.pca, graph = FALSE)
    plot.to.png("pca/language-taxonomy.png",
      function() {
        fviz_dend(res.hcpc)
      }
    )

    res.pca.transpose <- PCA(
         t(data.active),
         ncp = params.ncp,
         graph = FALSE)

    res.hcpc.transpose <- HCPC(res.pca.transpose, graph = FALSE)
    plot.to.png("pca/language-feature-taxonomy.png",
      function() {
        fviz_dend(
         cex = 0.9,
         res.hcpc.transpose,
         labels_track_height = 2.4)
      }
    )

    plot.phylogram.to.png = function(file.name, title, data) {

      plot.to.png(file.name,
        function() {

          language.distances = dist(data, method = "euclidean")

          language.hierarchical.clustering = hclust(
            language.distances,
            method = "ward.D2")

          plot(
            as.phylo(language.hierarchical.clustering),
            main = title,
            type = "phylogram",
            cex = 1.2,
            label.offset = 0.2,
            font = 1, # plain text, not bold or italic
            # xlab = "Height",
            # nodePar = nodePar,
            # horiz = TRUE
          )
        }
      )
    }

    plot.phylogram.to.png(
      "hierarchical-clustering-of-languages.png",
      "Hierarchical Clustering of Languages by Language Features",
      data)

    plot.phylogram.to.png(
      "hierarchical-clustering-of-language-features.png",
      "Hierarchical Clustering of Language Features by Language",
      data.transpose)

    plot.to.png("heatmap-of-language.png",
      function() {
        language.distances = dist(data, method = "euclidean")
        heatmap(
          data.matrix(language.distances),
          col = grey(0:255 / 255),
          symm = TRUE,
        )
      }
    )

    plot.to.png("multidimensional-scaling-of-languages-classic.png",
      function() {

        library(MASS)

        language.distances = dist(data, method = "euclidean")
        language.mds = cmdscale(language.distances, k=2, eig=TRUE)
        
        x = language.mds$points[,1]
        y = language.mds$points[,2]

        plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2", 
          main="Classic MDS", type="n")
        text(x, y, labels = row.names(data), cex=.7)
      }
    )

    plot.to.png("multidimensional-scaling-of-languages-non-metric.png",
      function() {

        library(MASS)

        language.distances = dist(data, method = "euclidean")
        language.mds = isoMDS(language.distances, k=2)
        
        x = language.mds$points[,1]
        y = language.mds$points[,2]

        plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2", 
          main="Nonmetric MDS", type="n")
        text(x, y, labels = row.names(data), cex=.7)
      }
    )



  #+end_src

 #+RESULTS:
 #+begin_example
 null device 
           1
 null device 
           1
 null device 
           1
 null device 
           1
 null device 
           1
 null device 
           1
 null device 
           1
 $type
 [1] "phylogram"

 $use.edge.length
 [1] TRUE

 $node.pos
 [1] 1

 $node.depth
 [1] 1

 $show.tip.label
 [1] TRUE

 $show.node.label
 [1] FALSE

 $font
 [1] 1

 $cex
 [1] 1.2

 $adj
 [1] 0

 $srt
 [1] 0

 $no.margin
 [1] FALSE

 $label.offset
 [1] 0.2

 $x.lim
 [1] 0.000000 8.997885

 $y.lim
 [1]  1 14

 $direction
 [1] "rightwards"

 $tip.color
 [1] "black"

 $Ntip
 [1] 14

 $Nnode
 [1] 13

 $root.time
 NULL

 $align.tip.label
 [1] FALSE

 null device 
           1
 $type
 [1] "phylogram"

 $use.edge.length
 [1] TRUE

 $node.pos
 [1] 1

 $node.depth
 [1] 1

 $show.tip.label
 [1] TRUE

 $show.node.label
 [1] FALSE

 $font
 [1] 1

 $cex
 [1] 1.2

 $adj
 [1] 0

 $srt
 [1] 0

 $no.margin
 [1] FALSE

 $label.offset
 [1] 0.2

 $x.lim
 [1]  0.00000 21.95377

 $y.lim
 [1]  1 31

 $direction
 [1] "rightwards"

 $tip.color
 [1] "black"

 $Ntip
 [1] 31

 $Nnode
 [1] 30

 $root.time
 NULL

 $align.tip.label
 [1] FALSE

 null device 
           1
 $rowInd
  [1]  9  5 12 11 14  8  1  4  2 13  3  6 10  7

 $colInd
  [1]  9  5 12 11 14  8  1  4  2 13  3  6 10  7

 $Rowv
 NULL

 $Colv
 NULL

 null device 
           1
 NULL
 null device 
           1
 initial  value 17.190627 
 iter   5 value 11.687150
 final  value 11.638097 
 converged
 NULL
 null device 
           1
 #+end_example

 | [[file:pca/principal-components.png]]                      |                                                           |
 | [[file:pca/language-features-primary-axes.png]]            | [[file:pca/language-features-secondary-axes.png]]             |
 | [[file:pca/languages-primary-axes.png]]                    | [[file:pca/languages-secondary-axes.png]]                     |
 | [[file:pca/language-taxonomy.png]]                         | [[file:pca/language-feature-taxonomy.png]]                    |
 | [[file:hierarchical-clustering-of-languages.png]]          | [[file:hierarchical-clustering-of-language-features.png]]     |
 | [[file:heatmap-of-language.png]]                           |                                                           |
 | [[file:multidimensional-scaling-of-languages-classic.png]] | [[file:multidimensional-scaling-of-languages-non-metric.png]] |
