|                                  |  C | C++ | C# |  D | Haskell | Java | JavaScript | LLVM-IR | ML | Python | Ripl | Rust | Scala | Scheme |
|----------------------------------+----+-----+----+----+---------+------+------------+---------+----+--------+------+------+-------+--------|
| garbage-collection               | -1 |  -1 | +1 | +1 |      +1 |   +1 |         +1 |      +0 | +1 |     +1 |   +0 |   -1 |    +1 |     +1 |
| explicit-indirection             | +1 |  +1 | -1 | +1 |      -1 |   -1 |         -1 |      +1 | -1 |     -1 |   +1 |   +1 |    -1 |     -1 |
| ownership-system                 | -1 |  -1 | -1 | -1 |      -1 |   -1 |         -1 |      -1 | -1 |     -1 |   +0 |   +1 |    -1 |     -1 |
| static-typing                    | +1 |  +1 | +1 | +1 |      +1 |   +1 |         -1 |      +1 | +1 |     -1 |   +1 |   +1 |    +1 |     -1 |
| memory-safety                    | -1 |  -1 | +1 | +1 |      +1 |   +1 |         +1 |      -1 | +1 |     +1 |   +1 |   +1 |    +1 |     +1 |
| type-inference                   | -1 |  +1 | +1 | +1 |      +1 |   -1 |         +0 |      -1 | +1 |     +0 |   +1 |   +1 |    +1 |     +0 |
| sub-typing                       | +1 |  +1 | +1 | +1 |      -1 |   +1 |         +0 |      -1 | -1 |     +1 |   +1 |   -1 |    +1 |     -1 |
| parametric-polymorphism          | -1 |  +1 | +1 | +1 |      +1 |   +1 |         +0 |      -1 | +1 |     +0 |   +1 |   +1 |    +1 |     +0 |
| type-classes                     | -1 |  -1 | -1 | -1 |      +1 |   -1 |         +0 |      -1 | +1 |     -1 |   +1 |   +1 |    -1 |     -1 |
| type-level-programming           | -1 |  +1 | -1 | +1 |      +1 |   -1 |         +0 |      -1 | +1 |     +0 |   +1 |   -1 |    +1 |     +0 |
| ad-hoc-polymorphism              | -1 |  +1 | +1 | +1 |      -1 |   +1 |         +0 |      -1 | -1 |     +0 |   +1 |   -1 |    +1 |     +0 |
| classical-inheritance            | -1 |  +1 | +1 | +1 |      -1 |   +1 |         -1 |      -1 | -1 |     +1 |   -1 |   -1 |    +1 |     -1 |
| prototypal-inheritance           | -1 |  -1 | -1 | -1 |      -1 |   -1 |         +1 |      -1 | -1 |     -1 |   -1 |   -1 |    -1 |     -1 |
| strict-evaluation                | +1 |  +1 | +1 | +1 |      -1 |   +1 |         +1 |      +1 | +1 |     +1 |   +1 |   +1 |    +1 |     +1 |
| type-safe-discriminated-unions   | -1 |  -1 | -1 | +1 |      +1 |   -1 |         -1 |      -1 | +1 |     -1 |   +1 |   +1 |    +1 |     -1 |
| null-safety                      | -1 |  -1 | -1 | -1 |      +1 |   -1 |         -1 |      -1 | +1 |     -1 |   +1 |   +1 |    -1 |     +1 |
| pattern-matching                 | -1 |  -1 | -1 | -1 |      +1 |   -1 |         -1 |      -1 | +1 |     -1 |   +1 |   +1 |    +1 |     -1 |
| mutable-data                     | +1 |  +1 | +1 | +1 |      -1 |   +1 |         +1 |      +1 | +1 |     +1 |   +1 |   +1 |    +1 |     +1 |
| immutable-data                   | -1 |  +1 | -1 | +1 |      +1 |   -1 |         -1 |      -1 | +1 |     -1 |   +1 |   +1 |    +1 |     -1 |
| c-style-syntax                   | +1 |  +1 | +1 | +1 |      -1 |   +1 |         +1 |      -1 | -1 |     +1 |   -1 |   +1 |    +1 |     -1 |
| uses-header-files                | +1 |  +1 | -1 | -1 |      -1 |   -1 |         -1 |      -1 | -1 |     -1 |   -1 |   -1 |    -1 |     -1 |
| whitespace-sensitive             | -1 |  -1 | -1 | -1 |      +1 |   -1 |         -1 |      -1 | -1 |     +1 |   +1 |   -1 |    -1 |     -1 |
| uniform-syntax                   | -1 |  -1 | -1 | -1 |      -1 |   -1 |         -1 |      -1 | -1 |     -1 |   +1 |   -1 |    -1 |     +1 |
| expression-oriented              | -1 |  -1 | -1 | -1 |      +1 |   -1 |         -1 |      -1 | +1 |     -1 |   +1 |   +1 |    +1 |     +1 |
| top-level-functions              | +1 |  +1 | -1 | +1 |      +1 |   -1 |         +1 |      +1 | +1 |     +1 |   +1 |   +1 |    -1 |     +1 |
| methods                          | -1 |  +1 | +1 | +1 |      -1 |   +1 |         +1 |      -1 | +0 |     +1 |   -1 |   -1 |    +1 |     -1 |
| uniform-function-call-syntax     | +0 |  -1 | +0 | +1 |      +0 |   +0 |         -1 |      -1 | +0 |     -1 |   +0 |   +0 |    +0 |     +0 |
| compile-time-function-evaluation | -1 |  +1 | -1 | +1 |      -1 |   -1 |         +0 |      -1 | -1 |     +0 |   +1 |   -1 |    -1 |     +0 |
| closures                         | -1 |  +1 | +1 | +1 |      +1 |   +1 |         +1 |      -1 | +1 |     +1 |   +1 |   +1 |    +1 |     +1 |

* Principal Component Analysis

  #+begin_src R :session :results output :exports none
    library("FactoMineR")
    library("factoextra")
    library("ape")


    data.transpose = read.csv(file="language-features.csv", head = TRUE, check.names = FALSE) 

    data = as.data.frame(t(data.transpose))

    statically.typed.languages = data[data$"static-typing"==1, ]

    data.to.analyze = data # statically.typed.languages

    data.active = data.to.analyze[, -(0:1)]

    params.ncp = 5


    res.pca <- PCA(
       data.active,
       ncp = params.ncp,
       graph = FALSE)

    plot.to.png = function(ptp.filename, ptp.function, ptp.width = 540, ptp.height = 540) {
      png(filename = ptp.filename, width = ptp.width, height = ptp.height)
      plot.result = ptp.function()
      print(plot.result)
      dev.off()
    }

    # plot the principal component weights
    plot.to.png("pca/principal-components.png",
      function(){fviz_eig(res.pca, addlabels = TRUE)})

    gradient = c("#0099FF", "#FF4400")

    axes.primary = c(1, 2)
    axes.secondary = c(3, 2)

    # plot the language features
    plot.to.png("pca/language-features-primary-axes.png", 
       function() {
         fviz_pca_var(
           res.pca,
           axes = axes.primary,
           geom = c("text", "point"),
           col.var = "cos2",
           gradient.cols = gradient,
           repel = TRUE)
       }
    )

    plot.to.png("pca/language-features-secondary-axes.png", 
       function() {
         fviz_pca_var(
           res.pca,
           axes = axes.secondary,
           geom = c("text", "point"),
           col.var = "cos2",
           gradient.cols = gradient,
           repel = TRUE)
       }
    )

    # plot the languages
    plot.to.png("pca/languages-primary-axes.png", 
       function() {
         fviz_pca_ind(
           res.pca,
           axes = axes.primary,
           geom = c("text", "point"),
           col.ind = "cos2",
           gradient.cols = gradient,
           repel = TRUE)
       }
    )

    plot.to.png("pca/languages-secondary-axes.png", 
       function() {
         fviz_pca_ind(
           res.pca,
           axes = axes.secondary,
           geom = c("text", "point"),
           col.ind = "cos2",
           gradient.cols = gradient,
           repel = TRUE)
       }
    )

    # plot hierarchical clustering on principal components
    res.hcpc <- HCPC(res.pca, graph = FALSE)
    plot.to.png("pca/language-taxonomy.png",
      function() {
        fviz_dend(res.hcpc)
      }
    )

    res.pca.transpose <- PCA(
         t(data.active),
         ncp = params.ncp,
         graph = FALSE)

    res.hcpc.transpose <- HCPC(res.pca.transpose, graph = FALSE)
    plot.to.png("pca/language-feature-taxonomy.png",
      function() {
        fviz_dend(
         cex = 0.9,
         res.hcpc.transpose,
         labels_track_height = 2.4)
      }
    )

    plot.phylogram.to.png = function(file.name, title, data) {

      plot.to.png(file.name,
        function() {

          language.distances = dist(data, method = "euclidean")

          language.hierarchical.clustering = hclust(
            language.distances,
            method = "ward.D2")

          plot(
            as.phylo(language.hierarchical.clustering),
            main = title,
            type = "phylogram",
            cex = 1.2,
            label.offset = 0.2,
            font = 1, # plain text, not bold or italic
            # xlab = "Height",
            # nodePar = nodePar,
            # horiz = TRUE
          )
        }
      )
    }

    plot.phylogram.to.png(
      "hierarchical-clustering-of-languages.png",
      "Hierarchical Clustering of Languages by Language Features",
      data)

    plot.phylogram.to.png(
      "hierarchical-clustering-of-language-features.png",
      "Hierarchical Clustering of Language Features by Language",
      data.transpose)

    plot.to.png("heatmap-of-language.png",
      function() {
        language.distances = dist(data, method = "euclidean")
        heatmap(
          data.matrix(language.distances),
          col = grey(0:255 / 255),
          symm = TRUE,
        )
      }
    )

    plot.to.png("multidimensional-scaling-of-languages-classic.png",
      function() {

        library(MASS)

        language.distances = dist(data, method = "euclidean")
        language.mds = cmdscale(language.distances, k=2, eig=TRUE)
        
        x = language.mds$points[,1]
        y = language.mds$points[,2]

        plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2", 
          main="Classic MDS", type="n")
        text(x, y, labels = row.names(data), cex=.7)
      }
    )

    plot.to.png("multidimensional-scaling-of-languages-non-metric.png",
      function() {

        library(MASS)

        language.distances = dist(data, method = "euclidean")
        language.mds = isoMDS(language.distances, k=2)
        
        x = language.mds$points[,1]
        y = language.mds$points[,2]

        plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2", 
          main="Nonmetric MDS", type="n")
        text(x, y, labels = row.names(data), cex=.7)
      }
    )



  #+end_src

 #+RESULTS:

 | [[file:pca/principal-components.png]]                      |                                                           |
 | [[file:pca/language-features-primary-axes.png]]            | [[file:pca/language-features-secondary-axes.png]]             |
 | [[file:pca/languages-primary-axes.png]]                    | [[file:pca/languages-secondary-axes.png]]                     |
 | [[file:pca/language-taxonomy.png]]                         | [[file:pca/language-feature-taxonomy.png]]                    |
 | [[file:hierarchical-clustering-of-languages.png]]          | [[file:hierarchical-clustering-of-language-features.png]]     |
 | [[file:heatmap-of-language.png]]                           |                                                           |
 | [[file:multidimensional-scaling-of-languages-classic.png]] | [[file:multidimensional-scaling-of-languages-non-metric.png]] |
