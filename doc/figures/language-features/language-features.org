|         | compilation | garbage-collection | ownership-system | static-typing | memory-safety | type-inference | sub-typing | parametric-polymorphism | type-classes | type-level-programming | ad-hoc-polymorphism | inheritance | strict-evaluation | type-safe-discriminated-unions | null-safety | pattern-matching | mutable-data | immutable-data | c-style-syntax | whitespace-sensitive | uniform-syntax | expression-oriented |
|---------+-------------+--------------------+------------------+---------------+---------------+----------------+------------+-------------------------+--------------+------------------------+---------------------+-------------+-------------------+--------------------------------+-------------+------------------+--------------+----------------+----------------+----------------------+----------------+---------------------|
| C       |          +1 |                 -1 |               -1 |            +1 |            -1 |             -1 |         +1 |                      -1 |           -1 |                     -1 |                  -1 |          -1 |                +1 |                             -1 |          -1 |               -1 |           +1 |             -1 |             +1 |                   -1 |             -1 |                  -1 |
| C++     |          +1 |                 -1 |               -1 |            +1 |            -1 |             +1 |         +1 |                      +1 |           -1 |                     +1 |                  +1 |          +1 |                +1 |                             -1 |          -1 |               -1 |           +1 |             +1 |             +1 |                   -1 |             -1 |                  -1 |
| C#      |          +1 |                 +1 |               -1 |            +1 |            +1 |             +1 |         +1 |                      +1 |           -1 |                     -1 |                  +1 |          +1 |                +1 |                             -1 |          -1 |               -1 |           +1 |             -1 |             +1 |                   -1 |             -1 |                  -1 |
| D       |          +1 |                 +1 |               -1 |            +1 |            +1 |             +1 |         +1 |                      +1 |           -1 |                     +1 |                  +1 |          +1 |                +1 |                             +1 |          -1 |               -1 |           +1 |             +1 |             +1 |                   -1 |             -1 |                  -1 |
| Haskell |          +1 |                 +1 |               -1 |            +1 |            +1 |             +1 |         -1 |                      +1 |           +1 |                     +1 |                  -1 |          -1 |                -1 |                             +1 |          +1 |               +1 |           -1 |             +1 |             -1 |                   +1 |             -1 |                  +1 |
| Java    |          +1 |                 +1 |               -1 |            +1 |            +1 |             -1 |         +1 |                      +1 |           -1 |                     -1 |                  +1 |          +1 |                +1 |                             -1 |          -1 |               -1 |           +1 |             -1 |             +1 |                   -1 |             -1 |                  -1 |
| Python  |          -1 |                 +1 |               -1 |            -1 |            +1 |             NA |         +1 |                      NA |           -1 |                     NA |                  NA |          +1 |                +1 |                             -1 |          -1 |               -1 |           +1 |             -1 |             +1 |                   +1 |             -1 |                  -1 |
| Ripl    |          +1 |                 NA |               NA |            +1 |            +1 |             +1 |         +1 |                      +1 |           +1 |                     +1 |                  +1 |          -1 |                +1 |                             +1 |          +1 |               +1 |           +1 |             +1 |             -1 |                   +1 |             +1 |                  +1 |
| Rust    |          +1 |                 -1 |               +1 |            +1 |            +1 |             +1 |         -1 |                      +1 |           +1 |                     -1 |                  -1 |          -1 |                +1 |                             +1 |          +1 |               +1 |           +1 |             +1 |             +1 |                   -1 |             -1 |                  +1 |
| Scala   |          +1 |                 +1 |               -1 |            +1 |            +1 |             +1 |         +1 |                      +1 |           -1 |                     +1 |                  +1 |          +1 |                +1 |                             +1 |          -1 |               +1 |           +1 |             +1 |             +1 |                   -1 |             -1 |                  +1 |
| Scheme  |          -1 |                 +1 |               -1 |            -1 |            +1 |             NA |         -1 |                      NA |           -1 |                     NA |                  NA |          -1 |                +1 |                             -1 |          +1 |               -1 |           +1 |             -1 |             -1 |                   -1 |             +1 |                  +1 |

* Principal Component Analysis
** Principal Components 
 #+begin_src R :file pca/principal-components.png :results file graphics :exports results
   library("FactoMineR")
   library("factoextra")

   data = read.csv(file="language-features.csv", head = TRUE, check.names = FALSE)
   data.active <- data[, -(0:1)]

   res.pca <- PCA(data.active, graph = FALSE)

   plot = fviz_eig(res.pca, addlabels = TRUE)
   print(plot)
 #+end_src
 #+RESULTS:
 [[file:pca/principal-components.png]]

** Language Features
 #+begin_src R :file pca/language-features.png :results file graphics :exports results
   library("FactoMineR")
   library("factoextra")

   data = read.csv(file="language-features.csv", head = TRUE, check.names = FALSE)
   data.active <- data[, -(0:1)]

   res.pca <- PCA(data.active, graph = FALSE)

   plot = fviz_pca_var(
              res.pca,
              col.var = "cos2", # Color by contributions to the PC
              geom = c("text"),
              ## gradient.cols = c("#0044BB", "#FC4400"),
              gradient.cols = c("#0099FF", "#FF4400"),
              ## gradient.cols = c("#0000FF", "#FF0000"),
              repel = TRUE     # Avoid text overlapping
              )
   print(plot)
 #+end_src
 #+RESULTS:
 [[file:pca/language-features.png]]
 
** Languages
 #+begin_src R :file pca/languages.png :results file graphics :exports results
   library("FactoMineR")
   library("factoextra")

   data = read.csv(file="language-features.csv", head = TRUE, check.names = FALSE)
   data.active <- data[, -(0:1)]

   res.pca <- PCA(data.active, graph = FALSE)

   plot = fviz_pca_ind(
              res.pca,
              col.ind = "cos2", # Color by the quality of representation
              gradient.cols = c("#0099FF", "#FF4400"),
              repel = TRUE     # Avoid text overlapping
              )
   print(plot)
 #+end_src
 #+RESULTS:
 [[file:pca/languages.png]]

 #+begin_src R :file pca/language-other-axes.png :results file graphics :exports results
   library("FactoMineR")
   library("factoextra")

   data = read.csv(file="language-features.csv", head = TRUE, check.names = FALSE)
   data.active <- data[, -(0:1)]

   res.pca <- PCA(data.active, graph = FALSE)

   plot = fviz_pca_ind(
              res.pca,
              col.ind = "cos2", # Color by the quality of representation
              gradient.cols = c("#0099FF", "#FF4400"),
              ## gradient.cols = c("#FFFFFF", "#000000"),
              axes = c(3,1),
              repel = TRUE     # Avoid text overlapping
              )
   print(plot)
 #+end_src

 #+RESULTS:
 [[file:pca/language-other-axes.png]]

** Languages and Language Features
 #+begin_src R :file pca/languages-and-language-features.png :results file graphics :exports results
   library("FactoMineR")
   library("factoextra")

   data = read.csv(file="language-features.csv", head = TRUE, check.names = FALSE)
   data.active <- data[, -(0:1)]

   res.pca <- PCA(data.active, graph = FALSE)

   plot = fviz_pca_biplot(
              res.pca,
              geom.var = c("text"),
              repel = TRUE,
              col.var = "#0099FF", # Variables color
              col.ind = "#FF4400"  # Individuals color

              ## gradient.cols = c("#0099FF", "#FF4400"),
              )
   print(plot)
 #+end_src
 #+RESULTS:
 [[file:pca/languages-and-language-features.png]]

* Multiple Correspondence Analysis
|         | compilation | memory-management | static-typing | memory-safety | type-inference | sub-typing | parametric-polymorphism | type-classes | type-level-programming | ad-hoc-polymorphism | inheritance | strict-evaluation | type-safe-discriminated-unions | null-safety | pattern-matching | mutable-data | immutable-data | syntax     | whitespace-sensitive | expression-oriented |
|---------+-------------+-------------------+---------------+---------------+----------------+------------+-------------------------+--------------+------------------------+---------------------+-------------+-------------------+--------------------------------+-------------+------------------+--------------+----------------+------------+----------------------+---------------------|
| C       | yes         | manual            | yes           | no            | no             | yes        | no                      | no           | no                     | no                  | no          | yes               | no                             | no          | no               | yes          | no             | c-style    | no                   | no                  |
| C++     | yes         | manual            | yes           | no            | yes            | yes        | yes                     | no           | yes                    | yes                 | yes         | yes               | no                             | no          | no               | yes          | yes            | c-style    | no                   | no                  |
| C#      | yes         | gc                | yes           | yes           | yes            | yes        | yes                     | no           | no                     | yes                 | yes         | yes               | no                             | no          | no               | yes          | no             | c-style    | no                   | no                  |
| D       | yes         | gc                | yes           | yes           | yes            | yes        | yes                     | no           | yes                    | yes                 | yes         | yes               | yes                            | no          | no               | yes          | yes            | c-style    | no                   | no                  |
| Haskell | yes         | gc                | yes           | yes           | yes            | no         | yes                     | yes          | yes                    | no                  | no          | no                | yes                            | yes         | yes              | no           | yes            | ml-style   | yes                  | yes                 |
| Java    | yes         | gc                | yes           | yes           | no             | yes        | yes                     | no           | no                     | yes                 | yes         | yes               | no                             | no          | no               | yes          | no             | c-style    | no                   | no                  |
| Python  | no          | gc                | no            | yes           | NA             | yes        | NA                      | no           | NA                     | NA                  | yes         | yes               | no                             | no          | no               | yes          | no             | c-style    | yes                  | no                  |
| Ripl    | yes         | NA                | yes           | yes           | yes            | yes        | yes                     | yes          | yes                    | yes                 | no          | yes               | yes                            | yes         | yes              | yes          | yes            | lisp-style | yes                  | yes                 |
| Rust    | yes         | ownership-system  | yes           | yes           | yes            | no         | yes                     | yes          | no                     | no                  | no          | yes               | yes                            | yes         | yes              | yes          | yes            | c-style    | no                   | yes                 |
| Scala   | yes         | gc                | yes           | yes           | yes            | yes        | yes                     | no           | yes                    | yes                 | yes         | yes               | yes                            | no          | yes              | yes          | yes            | c-style    | no                   | yes                 |
| Scheme  | no          | gc                | no            | yes           | NA             | no         | NA                      | no           | NA                     | NA                  | no          | yes               | no                             | yes         | no               | yes          | no             | lisp-style | no                   | yes                 |

** Principal Components
 #+begin_src R :file mca/principal-components.png :results file graphics :exports results
   library("FactoMineR")
   library("factoextra")

   data = read.csv(file="qualitative-features.csv", head = TRUE, check.names = FALSE)
   data.active <- data[, -(0:1)]

   res.mca <- MCA(data.active, graph = FALSE)

   plot = fviz_eig(res.mca, addlabels = TRUE)
   print(plot)
 #+end_src

 #+RESULTS:
 [[file:mca/principal-components.png]]

 
** Language Features
 #+begin_src R :results none :exports none
   library("FactoMineR")
   library("factoextra")

   data = read.csv(file="qualitative-features.csv", head = TRUE, check.names = FALSE)
   data.active <- data[, -(0:1)]

   res.mca <- MCA(data.active, graph = FALSE)

   png(filename = "mca/language-features.png", width = 540, height = 540)
   plot = fviz_mca_var(
            res.mca,
            col.var = "cos2",
            gradient.cols = c("#0099FF", "#FF4400"),
            repel = TRUE,
            ## ggTheme = theme_minimal()
            )
   print(plot)
 #+end_src
 [[file:mca/language-features.png]]


** Languages
 #+begin_src R :results none :exports none
   library("FactoMineR")
   library("factoextra")

   data = read.csv(file="qualitative-features.csv", head = TRUE, check.names = FALSE)
   data.active <- data[, -(0:1)]

   res.mca <- MCA(data.active, graph = FALSE)

   png(filename = "mca/languages.png", width = 540, height = 540)
   plot = fviz_mca_ind(
            res.mca,
            col.ind = "cos2",
            gradient.cols = c("#0099FF", "#FF4400"),
            repel = TRUE,
            ggTheme = theme_minimal())
   print(plot)
 #+end_src
 [[file:mca/languages.png]]
 

** Languages and Language Features
 #+begin_src R :results none :exports none
   library("FactoMineR")
   library("factoextra")

   data = read.csv(file="qualitative-features.csv", head = TRUE, check.names = FALSE)
   data.active <- data[, -(0:1)]

   res.mca <- MCA(data.active, graph = FALSE)

   png(filename = "mca/languages-and-language-features.png", width = 540, height = 540)
   plot = fviz_mca_biplot(
            res.mca,
            col.var = "#0099FF", # Variables color
            col.ind = "#FF4400",  # Individuals color
            repel = TRUE,
            ggTheme = theme_minimal())
   print(plot)
 #+end_src
 [[file:mca/languages-and-language-features.png]]


* Multiple Factor Analysis 
|---------+-------------+--------------------+------------------+-------------------+---------------+-------------+---------------+----------------+------------+-------------------------+--------------+------------------------+---------------------+-------------+--------------------------------+------------------+--------------+----------------+----------------+----------------------+----------------+---------------------|
|         |             |                 mm |               mm |                   |          sfty |        sfty |            tp |             tp |         tp |                      tp |           tp |                     tp |                  tp |             |                         disc-u |           disc-u |          mut |            mut |         syntax |               syntax |         syntax |              syntax |
|---------+-------------+--------------------+------------------+-------------------+---------------+-------------+---------------+----------------+------------+-------------------------+--------------+------------------------+---------------------+-------------+--------------------------------+------------------+--------------+----------------+----------------+----------------------+----------------+---------------------|
|         | compilation | garbage-collection | ownership-system | strict-evaluation | memory-safety | null-safety | static-typing | type-inference | sub-typing | parametric-polymorphism | type-classes | type-level-programming | ad-hoc-polymorphism | inheritance | type-safe-discriminated-unions | pattern-matching | mutable-data | immutable-data | c-style-syntax | whitespace-sensitive | uniform-syntax | expression-oriented |
|---------+-------------+--------------------+------------------+-------------------+---------------+-------------+---------------+----------------+------------+-------------------------+--------------+------------------------+---------------------+-------------+--------------------------------+------------------+--------------+----------------+----------------+----------------------+----------------+---------------------|
| C       |          +1 |                 -1 |               -1 |                +1 |            -1 |          -1 |            +1 |             -1 |         +1 |                      -1 |           -1 |                     -1 |                  -1 |          -1 |                             -1 |               -1 |           +1 |             -1 |             +1 |                   -1 |             -1 |                  -1 |
| C++     |          +1 |                 -1 |               -1 |                +1 |            -1 |          -1 |            +1 |             +1 |         +1 |                      +1 |           -1 |                     +1 |                  +1 |          +1 |                             -1 |               -1 |           +1 |             +1 |             +1 |                   -1 |             -1 |                  -1 |
| C#      |          +1 |                 +1 |               -1 |                +1 |            +1 |          -1 |            +1 |             +1 |         +1 |                      +1 |           -1 |                     -1 |                  +1 |          +1 |                             -1 |               -1 |           +1 |             -1 |             +1 |                   -1 |             -1 |                  -1 |
| D       |          +1 |                 +1 |               -1 |                +1 |            +1 |          -1 |            +1 |             +1 |         +1 |                      +1 |           -1 |                     +1 |                  +1 |          +1 |                             +1 |               -1 |           +1 |             +1 |             +1 |                   -1 |             -1 |                  -1 |
| Haskell |          +1 |                 +1 |               -1 |                -1 |            +1 |          +1 |            +1 |             +1 |         -1 |                      +1 |           +1 |                     +1 |                  -1 |          -1 |                             +1 |               +1 |           -1 |             +1 |             -1 |                   +1 |             -1 |                  +1 |
| Java    |          +1 |                 +1 |               -1 |                +1 |            +1 |          -1 |            +1 |             -1 |         +1 |                      +1 |           -1 |                     -1 |                  +1 |          +1 |                             -1 |               -1 |           +1 |             -1 |             +1 |                   -1 |             -1 |                  -1 |
| Python  |          -1 |                 +1 |               -1 |                +1 |            +1 |          -1 |            -1 |             NA |         +1 |                      NA |           -1 |                     NA |                  NA |          +1 |                             -1 |               -1 |           +1 |             -1 |             +1 |                   +1 |             -1 |                  -1 |
| Ripl    |          +1 |                 NA |               NA |                +1 |            +1 |          +1 |            +1 |             +1 |         +1 |                      +1 |           +1 |                     +1 |                  +1 |          -1 |                             +1 |               +1 |           +1 |             +1 |             -1 |                   +1 |             +1 |                  +1 |
| Rust    |          +1 |                 -1 |               +1 |                +1 |            +1 |          +1 |            +1 |             +1 |         -1 |                      +1 |           +1 |                     -1 |                  -1 |          -1 |                             +1 |               +1 |           +1 |             +1 |             +1 |                   -1 |             -1 |                  +1 |
| Scala   |          +1 |                 +1 |               -1 |                +1 |            +1 |          -1 |            +1 |             +1 |         +1 |                      +1 |           -1 |                     +1 |                  +1 |          +1 |                             +1 |               +1 |           +1 |             +1 |             +1 |                   -1 |             -1 |                  +1 |
| Scheme  |          -1 |                 +1 |               -1 |                +1 |            +1 |          +1 |            -1 |             NA |         -1 |                      NA |           -1 |                     NA |                  NA |          -1 |                             -1 |               -1 |           +1 |             -1 |             -1 |                   -1 |             +1 |                  +1 |

** Principal Components
 #+begin_src R :file mfa/principal-components.png :results file graphics :exports results
   library("FactoMineR")
   library("factoextra")

   data = read.csv(file="mfa-data.csv", head = TRUE, check.names = FALSE)
   data.active <- data[, -(0:1)]

   ## png(filename = "mfa/principal-components.png", width = 540, height = 540)

   res.mfa <- MFA(
            data,
            group=c(1, 2, 1, 2, 7, 1, 2, 2, 4),

            type=c(rep("s",9)),

            ncp=9,
            name.group=c(
              "compilation",
              "memory-management",
              "evaluation",
              "safety",
              "type-system",
              "inheritance",
              "discriminated-unions",
              "mutability",
              "syntax"),
              graph = FALSE
            )
    plot = fviz_screeplot(res.mfa, addlabels = TRUE)
    print(plot)
 #+end_src

 #+RESULTS:
 [[file:mfa/principal-components.png]]

** Feature Groups
 #+begin_src R :file mfa/groups.png :results file graphics :exports results
   library("FactoMineR")
   library("factoextra")

   data = read.csv(file="mfa-data.csv", head = TRUE, check.names = FALSE)
   data.active <- data[, -(0:1)]

   ## png(filename = "mfa/feature-groups.png", width = 540, height = 540)
   res.mfa <- MFA(
            data,
            group=c(1, 2, 1, 2, 7, 1, 2, 2, 4),

            type=c(rep("s",9)),

            ncp=9,
            name.group=c(
              "compilation",
              "memory-management",
              "evaluation",
              "safety",
              "type-system",
              "inheritance",
              "discriminated-unions",
              "mutability",
              "syntax"),
              graph = FALSE
            )
    plot = fviz_mfa_var(res.mfa, "group", repel="true")
    print(plot)
 #+end_src

 #+RESULTS:
 [[file:mfa/groups.png]]
** Features
 #+begin_src R :file mfa/features.png :results file graphics :exports results
   library("FactoMineR")
   library("factoextra")

   data = read.csv(file="mfa-data.csv", head = TRUE, check.names = FALSE)
   data.active <- data[, -(0:1)]

   ## png(filename = "mfa/principal-components.png", width = 540, height = 540)
   ## re
   res.mfa <- MFA(
            data,
            group=c(1, 2, 1, 2, 7, 1, 2, 2, 4),

            type=c(rep("s",9)),

            ncp=9,
            name.group=c(
              "compilation",
              "memory-management",
              "evaluation",
              "safety",
              "type-system",
              "inheritance",
              "discriminated-unions",
              "mutability",
              "syntax"),
              graph = FALSE
            )
    plot = fviz_mfa_var(res.mfa, "quanti.var", repel=TRUE)
    print(plot)
 #+end_src

 #+RESULTS:
 [[file:mfa/features.png]]
** Languages
 #+begin_src R :file mfa/languages.png :results file graphics :exports results
   library("FactoMineR")
   library("factoextra")

   data = read.csv(file="mfa-data.csv", head = TRUE, check.names = FALSE)
   data.active <- data[, -(0:1)]

   ## png(filename = "mfa/principal-components.png", width = 540, height = 540)
   ## re
   res.mfa <- MFA(
            data,
            group=c(1, 2, 1, 2, 7, 1, 2, 2, 4),

            type=c(rep("s",9)),

            ncp=9,
            name.group=c(
              "compilation",
              "memory-management",
              "evaluation",
              "safety",
              "type-system",
              "inheritance",
              "discriminated-unions",
              "mutability",
              "syntax"),
              graph = FALSE
            )
    plot = fviz_mfa_ind(res.mfa, col.ind = "cos2", repel="true")
    print(plot)
 #+end_src

 #+RESULTS:
 [[file:mfa/languages.png]]

