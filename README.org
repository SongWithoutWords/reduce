* Robust Intuitive Programming Language (ripl)
  A programming language and work-in-progress called ripl. Written in Scala with an LLVM back-end, ripl is intended to combine the safety and purity of a language like Haskell, with the low-level capabilities of a language like C++ or Rust, and the metaprogramming capabilities of a language like Racket or D.  

** Planned Features
  - Compiled
  - Strong, static typing
  - Type inference
  - Strict evaluation
  - Type-safe discriminated unions
  - Pattern matching
  - Mutable data structures to support computationally intensive tasks
  - Type-level constraints on the mutability of data and purity of functions
  - Ad-hoc polymorphism (overloading) to promote programmer sanity
  - Parametric polymorphism (templates/generics) to abstract over types and perform type-level programming
  - A readable, uniform syntax that is suitable for metaprogramming, inspired by [[https://sourceforge.net/p/readable/wiki/Home/][Readable Lisp S-expressions]]

** Comparison with Other Languages
*TODO*

** Motivation and Rationale
*TODO*

** Examples
*TODO*

** Usage
*TODO*
